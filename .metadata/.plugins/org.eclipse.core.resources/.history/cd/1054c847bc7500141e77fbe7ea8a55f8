package dk.dtu.imm.pa;

import org.antlr.runtime.*;
import org.antlr.runtime.tree.*;

/**
 * ProgramAnalyzer
 * - receives the file path of the source code to analyze, and performs the given analysis techniques
 *   on it.
 */
public class Main {
  public static void main(String args[]) throws Exception {
	// Check for source file to be received as argument
	String srcFile;
	if(args.length != 1){
		srcFile = "samples/sample.lang";
	} else {
		srcFile = args[0];
	}
	
	// Create program structure of lines of code (CodeLines)
	Program program = new Program();
	
	// Parse source file into a tree
    TheLangLexer lex = new TheLangLexer(new ANTLRFileStream(srcFile));
    CommonTokenStream tokens = new CommonTokenStream(lex);
    TheLangParser parser = new TheLangParser(tokens);
    
    CommonTree codeTree = null;

    // Run the parser over the given source file
    try {
      TheLangParser.program_return parserResult = parser.program();
      if (parserResult != null) {
        codeTree = (CommonTree) parserResult.getTree();
      }
    } catch (RecognitionException e) {
      e.printStackTrace();
      System.exit(-1);
    }
    
    // Auxiliary CodeLine for the loop
    CodeLine currentCodeLine = new CodeLine();
    
    // Line where the last element was located
    int currentLineNumber = -1;

    // Iterate over the parsed program
    for(int i = 0; i < codeTree.getChildCount(); i++){
    	// Get the next grammar element
    	Tree child = codeTree.getChild(i);
    	
    	// Verify whether the grammar element is on the same line
    	if(child.getLine() == currentLineNumber){
    		// if it is, add it to the previous CodeLine
    		currentCodeLine.addElement(child);
    	} else {
    		// if it isn't, instantiate and store a new one, add element, and update line number    		
        	currentCodeLine = new CodeLine(child.getLine());
        	program.add(currentCodeLine);
        	
        	currentCodeLine.addElement(child);
        	
        	currentLineNumber = child.getLine();
    	}    	
    }
    
    // Generate looping structure
    Program.linkLoops();
 
    System.out.println(codeTree.toStringTree());
    System.out.println(program.get(10).getElements().toString());
  }
}
