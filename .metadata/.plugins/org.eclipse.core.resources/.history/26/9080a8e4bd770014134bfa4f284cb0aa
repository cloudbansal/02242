package dk.dtu.imm.pa.programObjects;

import java.io.IOException;
import java.util.ArrayList;

import org.antlr.runtime.ANTLRFileStream;
import org.antlr.runtime.CommonTokenStream;
import org.antlr.runtime.RecognitionException;
import org.antlr.runtime.tree.CommonTree;
import org.antlr.runtime.tree.Tree;

import dk.dtu.imm.pa.generatedParser.TheLangLexer;
import dk.dtu.imm.pa.generatedParser.TheLangParser;

public class Program extends ArrayList<CodeLine> {

	/**
	 * Default value for serialization
	 */
	private static final long serialVersionUID = 1L;
	
	/**
	 * Program structure, defining the program usage and modification of variables, and control flow
	 * @param srcFile: the path to the file to be used as source
	 * @throws IOException
	 */
	public Program(String srcFile) throws IOException{
		super();
		
		this.parseSourceFile(srcFile);
		
		this.linkLoops();
		this.linkConditionals();
	}
	
	/**
	 * Parses a source file into the program object
	 * @param srcFile: the path to the file to be parsed
	 * @throws IOException
	 */
	private void parseSourceFile(String srcFile) throws IOException{
		// Parse source file into a tree
	    TheLangLexer lex = new TheLangLexer(new ANTLRFileStream(srcFile));
	    CommonTokenStream tokens = new CommonTokenStream(lex);
	    TheLangParser parser = new TheLangParser(tokens);
	    
	    CommonTree codeTree = null;

	    // Run the parser over the given source file
	    try {
	      TheLangParser.program_return parserResult = parser.program();
	      if (parserResult != null) {
	        codeTree = (CommonTree) parserResult.getTree();
	      }
	    } catch (RecognitionException e) {
	      e.printStackTrace();
	      System.exit(-1);
	    }
	    
	    // Auxiliary CodeLine for the loop
	    CodeLine currentCodeLine = new CodeLine();
	    
	    // Line where the last element was located
	    int currentLineNumber = -1;

	    // Iterate over the parsed program
	    for(int i = 0; i < codeTree.getChildCount(); i++){
	    	// Get the next grammar element
	    	Tree child = codeTree.getChild(i);
	    	
	    	// Verify whether the grammar element is on the same line
	    	if(child.getLine() == currentLineNumber){
	    		// if it is, add it to the previous CodeLine
	    		currentCodeLine.addElement(child);
	    	} else {
	    		// if it isn't, instantiate and store a new one, add element, and update line number    		
	        	currentCodeLine = new CodeLine(child.getLine());
	        	this.add(currentCodeLine);
	        	
	        	currentCodeLine.addElement(child);
	        	
	        	currentLineNumber = child.getLine();
	    	}    	
	    }
	}
	

	/**
	 * Returns the program, with comments about variable use/modification,
	 * conditionals, and loop structure.
	 */
	public String toString(){
		StringBuilder programString = new StringBuilder();
		for(CodeLine codeLine: this){
			programString.append(codeLine.getLineNumber()+":");
			
			programString.append("\t\t");
			
			programString.append(codeLine.getElements().toString());
			
			if(codeLine.affectsControlFlow()){
				programString.append("   is{");
				programString.append( codeLine.isIfStatement() ?         "if, "    : "");
				programString.append( codeLine.isElseStatement() ?       "else, "  : "");
				programString.append( codeLine.isFiStatement() ?         "fi, "    : "");
				programString.append( codeLine.isWhileStatement() ?      "while, " : "");
				programString.append( codeLine.isEndOfWhileStatement() ? "od, "    : "");
				programString.append("}");
			}
			
			if(!codeLine.getModifiedVariables().isEmpty()){
				programString.append("   modifies{");
				programString.append( codeLine.getModifiedVariables().toString());
				programString.append("}");
			}
			
			if(!codeLine.getUsedVariables().isEmpty()){
				programString.append("   uses{");
				programString.append( codeLine.getUsedVariables().toString());
				programString.append("}");
			}
			
			if(codeLine.getIfParent() != null)
				programString.append("   ifParentLine: "    + codeLine.getIfParent().getLineNumber());
			
			if(codeLine.getEndOfWhileCodeLine() != null)
				programString.append("   endOfWhileLine: "  + codeLine.getEndOfWhileCodeLine().getLineNumber());
			
			if(codeLine.getElseParent() != null)
				programString.append("   elseParentLine: "  + codeLine.getElseParent().getLineNumber());
			
			if(codeLine.getLoopParent() != null)
				programString.append("   whileParentLine: " + codeLine.getLoopParent().getLineNumber());

			programString.append("\n");
		}
		
		return programString.toString();
	}
	
	/**
	 * Generate looping structure within the array, with each CodeLine referencing its loop parent
	 */
	private void linkLoops(){
		// State information: parent of the CodeLine (line statement that issued the loop where we are into)
	    CodeLine loopParentCodeLine = null;

	    // Generate looping structure
	    for(CodeLine codeLine : this){
	    	// Set to null, or current parent loop CodeLine 
	    	codeLine.setLoopParent(loopParentCodeLine);
	    	
	    	if(codeLine.isWhileStatement()){
	    		loopParentCodeLine = codeLine;
	    	}
	    	if(codeLine.isEndOfWhileStatement()){
	    		// Go up one level
	    		loopParentCodeLine = loopParentCodeLine.getLoopParent();
	    		
	    		// Set end of the while, on the while CodeLine
	    		codeLine.getLoopParent().setEndOfWhileCodeLine(codeLine);
	    	}
	    }
	}
	
	/**
	 * Generate conditional blocks structure
	 */
	private void linkConditionals(){
		// State information: parent of the CodeLine (line statement that issued the if where we are into)
	    CodeLine ifParentCodeLine = null;
	    CodeLine elseParentCodeLine = null;

	    // Generate looping structure
		for (CodeLine codeLine : this) {
			// Set to null, or current parents
			codeLine.setIfParent(ifParentCodeLine);
			codeLine.setElseParent(elseParentCodeLine);

			if (codeLine.isIfStatement()) {
				ifParentCodeLine = codeLine;
				elseParentCodeLine = null;
			} else if (codeLine.isElseStatement()) {
				// "else" is in same scope as its corresponding "if"
				codeLine.setIfParent(ifParentCodeLine.getIfParent());
				codeLine.setElseParent(ifParentCodeLine.getElseParent());

				elseParentCodeLine = codeLine;
	    	} else if (codeLine.isFiStatement()) {
	    		ifParentCodeLine = ifParentCodeLine.getIfParent();
	    	    elseParentCodeLine = elseParentCodeLine.getElseParent();
			}
	    }
	}
}
